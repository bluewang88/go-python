package Go_base

// 数组
// 类型 [n]T 表示一个数组，它拥有 n 个类型为 T 的值。，数组中的类型需要一致
// 数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义的类型。
// 数组的长度是数组类型的一部分，因此数组不能改变大小。

// 数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。数组的下标取值范围是从0开始，到长度减1。
// 例如，数组的长度为 10，则下标范围是 0 到 9。

// 表达式

// var a [10]int
// 会将变量 a 声明为拥有 10 个整数的数组。

// 数组的长度是其类型的一部分，因此数组不能改变大小。 这看起来是个限制，不过没关系，Go 拥有更加方便的使用数组的方式。

/*
 * 数组是值类型 Go中的数组是值类型，而不是引用类型。
 * 这意味着当它们被分配给一个新变量时，将把原始数组的副本分配给新变量。如果对新变量进行了更改，则不会在原始数组中反映。
 * 这与切片不同，切片是引用类型，当它们被分配给一个新变量时，将把原始切片的引用分配给新变量。
 * 这意味着对新变量的更改将反映在原始切片中。
 * 这使得数组在需要保护数据不被意外修改时非常有用。
 * 例如，如果你有一个数组包含敏感数据，你可以将它分配给一个新变量，然后在新变量上进行操作，而不会影响原始数组。
 * 数组的大小是类型的一部分。
 * 因此[5]int和[25]int是不同的类型。因此，数组不能被调整大小。不要担心这个限制，因为切片的存在是为了解决这个问题。
 * ------------------------------------------------------------------------------------------
 * go语言的数组和python的list类似，都是可以存储多个元素的集合。
 * 不同的是，go语言的数组是值类型，而python的list是引用类型。
 * 这意味着在go语言中，当你将一个数组赋值给另一个数组时，实际上是将整个数组的副本赋值给了另一个数组。
 * 而在python中，当你将一个list赋值给另一个list时，实际上是将list的引用赋值给了另一个list。
 * python的list中可以放入不同类型的元素，而go语言的数组中只能放入同一类型的元素。
 * 这意味着在go语言中，你必须在声明数组时指定数组的长度和元素的类型。
 * 而在python中，你可以在运行时动态地添加元素到list中，而不需要事先声明list的长度和元素的类型。
 * ------------------------------------------------------------------------------------------
 */

import (
	"fmt"
)

func HelloArray() {

	fmt.Println("-------------a是一个int类型的数组，长度为5------------------")
	var a [5]int // 声明一个长度为 5 的整数数组

	fmt.Printf("a的类型是：%T\n", a) // 输出整个数组的类型
	a[0] = 1                    // 给数组的第一个元素赋值
	a[1] = 2                    // 给数组的第二个元素赋值
	a[2] = 3                    // 给数组的第三个元素赋值
	a[3] = 4                    // 给数组的第四个元素赋值
	a[4] = 5                    // 给数组的第五个元素赋值

	fmt.Println(a)    // 输出整个数组
	fmt.Println(a[0]) // 输出第一个元素
	fmt.Println(a[1]) // 输出第二个元素
	fmt.Println(a[2]) // 输出第三个元素
	fmt.Println(a[3]) // 输出第四个元素
	fmt.Println(a[4]) // 输出第五个元素

	fmt.Println("-------------a是一个int类型的数组，长度为5------------------")
	fmt.Println("-------------b是一个string类型的数组，长度为5------------------")

	var b [5]string
	b[0] = "Hello"
	b[1] = "World"
	b[2] = "Go"
	b[3] = "Lang"
	b[4] = "!"

	fmt.Printf("b的类型是：%T\n", b) // 输出整个数组的类型
	fmt.Println(b)
	fmt.Println(b[0])
	fmt.Println(b[1])
	fmt.Println(b[2])
	fmt.Println(b[3])
	fmt.Println(b[4])
	fmt.Println("-------------b是一个string类型的数组，长度为5------------------")

	fmt.Println("-------------c是一个float64类型的数组，长度为5------------------")
	c := [5]float64{1.1, 2.2, 3.3, 4.4, 5.5} // 声明并初始化一个长度为 5 的浮点数数组
	//初始化数组中 {} 中的元素个数不能大于 [] 中的数字。如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：
	fmt.Printf("c的类型是：%T\n", c) // 输出整个数组
	fmt.Println(c)              // 输出整个数组
	fmt.Println(c[0])           // 输出第一个元素
	fmt.Println(c[1])           // 输出第二个元素
	fmt.Println(c[2])           // 输出第三个元素
	fmt.Println(c[3])
	fmt.Println(c[4])
	fmt.Println("-------------c是一个float64类型的数组，长度为5------------------")

	fmt.Println("-------------d是一个rune类型的数组，长度为5------------------")
	var d = []rune{'a', 'b', 'c', 'd', 'e'} // 声明并初始化一个长度为 5 的字符silice

	//打印d的类型
	fmt.Printf("d的类型是：%T\n", d) // 输出整个数组
	fmt.Println(d)
	fmt.Println(d[0])
	fmt.Println(d[1])
	fmt.Println(d[2])
	fmt.Println(d[3])
	fmt.Println(d[4])

	fmt.Println("-------------d是一个rune类型的数组，长度为5------------------")

	fmt.Println("-------------e是一个int类型的数组，长度为5------------------")
	var e = [...]int{1, 2, 3, 4, 5} // 声明并初始化一个长度为 5 的整数数组
	// [...] 表示数组的长度由初始化时的元素个数决定
	fmt.Printf("e的类型是：%T\n", e) // 输出整个数组
	fmt.Println(e)
	fmt.Println(e[0]) // 输出第一个元素
	fmt.Println(e[1]) // 输出第二个元素
	fmt.Println(e[2]) // 输出第三个元素
	fmt.Println(e[3]) // 输出第四个元素
	fmt.Println(e[4]) // 输出第五个元素
	fmt.Println("-------------e是一个int类型的数组，长度为5------------------")

	fmt.Println("-------------f是一个int类型的数组，长度为5------------------")
	var f = [5]int{4: 5} // 声明并初始化一个长度为 5 的整数数组
	fmt.Printf("f的类型是：%T\n", f)
	fmt.Println(f)
	fmt.Println(f[0])
	fmt.Println(f[1])
	fmt.Println(f[2])
	fmt.Println(f[3])
	fmt.Println(f[4])
	fmt.Println("-------------f是一个int类型的数组，长度为5------------------")

	fmt.Println("-------------g是一个int类型的数组，长度为5------------------")
	var g = [5]int{2: 3} // 声明并初始化一个长度为 5 的整数数组

	fmt.Printf("g的类型是：%T\n", g) // 输出整个数组
	fmt.Println(g)
	fmt.Println(g[0]) // 输出第一个元素
	fmt.Println(g[1]) // 输出第二个元素
	fmt.Println(g[2]) // 输出第三个元素
	fmt.Println(g[3]) // 输出第四个元素
	fmt.Println(g[4]) // 输出第五个元素
	fmt.Println("-------------g是一个int类型的数组，长度为5------------------")
	fmt.Println("-------------h是一个int类型的数组，长度为5------------------")
	var h = [...]int{3: 4}
	fmt.Printf("h的类型是：%T\n", h) // 输出整个数组
	fmt.Println(h)
	fmt.Println(h[0]) // 输出第一个元素
	fmt.Println(h[1]) // 输出第二个元素
	fmt.Println(h[2]) // 输出第三个元素
	fmt.Println(h[3]) // 输出第四个元素
	fmt.Println("-------------h是一个int类型的数组，长度为5------------------")
	fmt.Println("-------------i是一个int类型的数组，长度为5------------------")
	var i = [...]int{1: 2, 4: 3} // 声明并初始化一个长度为 5 的整数数组
	// [...] 表示数组的长度由初始化时的元素个数决定
	// 1:2 表示下标为 1 的元素值为 2，4:3 表示下标为 4 的元素值为 3
	// 其他元素值为 0
	// 例如：i[0] = 0, i[1] = 2, i[2] = 0, i[3] = 0, i[4] = 3
	// 1:2 表示下标为 1 的元素值为 2，4:3 表示下标为 4 的元素值为 3
	fmt.Printf("i的类型是：%T\n", i) // 输出整个数组
	fmt.Println(i)
	fmt.Println(i[0]) // 输出第一个元素
	fmt.Println(i[1]) // 输出第二个元素
	fmt.Println(i[2]) // 输出第三个元素
	fmt.Println(i[3]) // 输出第四个元素
	fmt.Println(i[4]) // 输出第五个元素
	fmt.Println("-------------i是一个int类型的数组，长度为5------------------")

	fmt.Println("-------------j是一个int类型的数组，长度为5------------------")
	var j = [5]int{1}           // 声明并初始化一个长度为 5 的整数数组
	fmt.Printf("j的类型是：%T\n", j) // 输出整个数组
	fmt.Println(j)
	fmt.Println(j[0])
	fmt.Println(j[1])
	fmt.Println(j[2])
	fmt.Println(j[3])
	fmt.Println(j[4])
	fmt.Println("-------------j是一个int类型的数组，长度为5------------------")

	fmt.Println("-------------遍历数组b------------------")

	for index, value := range b {
		fmt.Printf("b[%d] = %s\n", index, value)
	}
	fmt.Println("-------------遍历数组b------------------")

	fmt.Println("-------------查询数组c的长度------------------")
	fmt.Printf("c的长度是：%d\n", len(c)) // 输出数组的长度
	fmt.Println("-------------查询数组c的长度------------------")

	fmt.Println("-------------查询数组c的容量------------------")
	fmt.Printf("c的容量是：%d\n", cap(c)) // 输出数组的容量
	fmt.Println("-------------查询数组c的容量------------------")

}
