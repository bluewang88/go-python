package gorouting_test

import "time"

/*
# 线程、进程、协程简要描述

## 进程 (Process)
- **定义**：操作系统分配资源的基本单位，是程序的一次执行实例
- **特点**：拥有独立的内存空间和系统资源
- **开销**：创建和切换开销大
- **通信**：需要特殊的进程间通信(IPC)机制
- **例子**：同时运行的不同应用程序(如浏览器、音乐播放器)

## 线程 (Thread)
- **定义**：CPU调度的基本单位，是进程内的执行流
- **特点**：同一进程内的线程共享内存空间和资源
- **开销**：比进程小，但仍有一定开销
- **通信**：可通过共享内存直接通信，但需要同步机制
- **例子**：浏览器中负责页面渲染、网络请求的不同执行流

## 协程 (Goroutine/Coroutine)
- **定义**：用户态的轻量级"线程"，由编程语言运行时管理
- **特点**：创建成本极低，可同时存在数万个
- **开销**：切换开销极小，不涉及内核上下文切换
- **调度**：通常由语言运行时而非操作系统调度
- **例子**：Go语言中的goroutine，可以轻松创建thousands of concurrent tasks

## 简单对比
- 进程：重量级，独立资源空间，适合需要隔离的任务
- 线程：中量级，共享资源，适合并行计算
- 协程：轻量级，高并发，适合I/O密集型应用

在Go语言中，goroutine是协程的一种实现，它使得处理高并发任务变得简单高效。
*/

func HelloGoroutine() {
	// 创建一个goroutine

	for i := 0; i < 100; i++ {
		go func(n int) { //闭包
			println("Hello, goroutine!", n)
		}(i)
	}

	// 主线程继续执行
	println("Hello, main!")

	time.Sleep(2 * time.Second)
}

// 让主线程等待一段时间，以便观察goroutine的输出
// 这里使用了time包来实现简单的延时
